extend type Query {
    viewer: User
}

type User {
    id: ID!

    dateCreated: DateTime!

    email: String!

    firstName: String!

    lastName: String!

    phoneNumber: String

    profilePictureUrl: String

    zipCode: Int

    city: String

    state: String

    streetAddress: String

    fullAddress: String

    """
    Permits for organizations the user is a member of
    """
    organizations: [OrganizationMemberPermit]!

    """
    Permits for seasons the user is participating in
    """
    seasons: [SeasonParticipantPermit]!

    """
    Find a permit for a season the user is participating in by id.
    Null if not participating
    """
    season(id: ID!): SeasonParticipantPermit
}

extend type Mutation {
    createUser(input: CreateUserInput!): CreateUserPayload!

    updateUser(input: UpdateUserInput!): UpdateUserPayload!
}

input CreateUserInput {
    firstName: String!

    lastName: String!

    phoneNumber: String
}

type CreateUserPayload {
    user: User

    errors: [InputError!]!
}

input UpdateUserInput {
    userId: ID!

    firstName: String

    lastName: String

    phoneNumber: Int

    profilePictureB64: String

    streetAddress: String

    city: String

    state: String

    zipCode: Int
}

type UpdateUserPayload {
    user: User

    errors: [InputError!]!
}
