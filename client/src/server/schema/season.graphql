extend type Query {
    season(id: ID!): Season
}

enum SeasonRoleType {
    REFEREE
    MANAGER
}

type Season {
    id: ID!

    dateCreated: DateTime!

    """
    The organization that owns the season
    """
    organization: Organization!

    name: String!

    startDate: DateTime!

    endDate: DateTime!

    """
    The divisions of the season
    """
    divisions: [Division]!

    """
    A list of users participating in the season
    """
    participants: [SeasonParticipantEdge!]!
}

type SeasonParticipantEdge {
    """
    The user participating in the season
    """
    node: User!

    """
    The membership of the user in the organization that owns the season
    """
    membership: OrganizationMembership!

    """
    The participation of the user
    """
    permit: SeasonParticipationPermit!

    """
    Season positions available for signup if they are a referee
    """
    visibility: [Position!]
}

"""
Permit for a user participating in a season
"""
type SeasonParticipationPermit {
    """
    List of roles assigned to the participant
    """
    roles: [SeasonRoleType!]!
}

extend type Mutation {
    createSeason(input: CreateSeasonInput!): CreateSeasonPayload

    updateSeason(input: UpdateSeasonInput!): UpdateSeasonPayload

    addSeasonParticipants(
        input: AddSeasonParticipantsInput!
    ): AddSeasonParticipantsPayload

    removeSeasonParticipant(
        input: RemoveSeasonParticipantInput!
    ): RemoveSeasonParticipantPayload
}

input CreateSeasonInput {
    organizationId: ID!

    name: String!

    startDate: String!

    endDate: String!
}

type CreateSeasonPayload {
    season: Season

    errors: [InputError!]!
}

input UpdateSeasonInput {
    seasonId: ID!

    name: String

    startDate: String

    endDate: String
}

type UpdateSeasonPayload {
    season: Season

    errors: [InputError!]!
}

input AddSeasonParticipantsInput {
    seasonId: ID!

    """
    List of requests to batch execute
    """
    requests: [AddSeasonParticipantRequestInput!]!
}

"""
An input request for adding a new season participant
"""
input AddSeasonParticipantRequestInput {
    """
    User to add as a participant
    """
    userId: ID!

    """
    List of roles to assign the user
    """
    roles: [SeasonRoleType!]!
}

type AddSeasonParticipantsPayload {
    success: Boolean
}

input RemoveSeasonParticipantInput {
    seasonId: ID!
    userId: ID!
}

type RemoveSeasonParticipantPayload {
    success: Boolean
}
