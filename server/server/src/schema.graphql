# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateDivisionInput {
  name: String!
  seasonId: ID!
}

type CreateDivisionPayload {
  division: Division
  errors: [InputError!]!
}

input CreateGameInput {
  divisionId: ID!
  endDate: DateTime
  location: String
  name: String!
  startTime: DateTime!
}

type CreateGamePayload {
  errors: [InputError!]!
  game: Game
}

input CreateOrganizationInput {
  description: String
  email: String
  name: String!
  websiteUrl: String
}

type CreateOrganizationPayload {
  errors: [InputError!]!
  organization: Organization
}

input CreatePositionInput {
  divisionId: ID!
  name: String!
}

type CreatePositionPayload {
  errors: [InputError!]!
  position: Position
}

input CreateSeasonInput {
  endDate: DateTime!
  name: String!
  organizationId: ID!
}

type CreateSeasonPayload {
  errors: [InputError!]!
  season: Season
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Division {
  createdAt: DateTime!
  games(after: String, before: String, first: Int, last: Int): GameConnection!
  id: ID!
  name: String!
  positions: [Position!]!
  season: Season!
  updatedAt: DateTime!
}

type Game {
  createdAt: DateTime!
  endTime: DateTime
  id: ID!
  listings: [GameListing!]!
  location: String
  name: String!
  startTime: DateTime!
  updatedAt: DateTime!
}

type GameConnection {
  edges: [GameEdge!]!
  pageInfo: PageInfo!
}

type GameEdge {
  cursor: String!
  node: Game!
}

type GameListing {
  assignee: GameListingAssigneeEdge
  createdAt: DateTime!
  id: ID!
  name: String!
  position: Position
  updatedAt: DateTime!
}

type GameListingAssigneeEdge {
  node: User!
  permit: SeasonParticipationPermit!
}

type InputError {
  key: String!
  message: String!
}

type Mutation {
  createDivision(input: CreateDivisionInput!): CreateDivisionPayload
  createGame(input: CreateGameInput!): CreateGamePayload
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload
  createPosition(input: CreatePositionInput!): CreatePositionPayload
  createSeason(input: CreateSeasonInput!): CreateSeasonPayload
}

type Organization {
  createdAt: DateTime!
  description: String
  email: String
  id: ID!
  members: [OrganizationMemberEdge!]!
  name: String!
  seasons: [Season!]!
  updatedAt: DateTime!
  websiteUrl: String
}

type OrganizationMemberEdge {
  isParticipating(seasonId: ID!): Boolean!
  membership: OrganizationMembership!
  node: User!
}

type OrganizationMembership {
  createdAt: DateTime!
  id: ID!
  role: OrganizationRoleType!
  updatedAt: DateTime!
}

enum OrganizationRoleType {
  MEMBER
  OWNER
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Position {
  createdAt: DateTime!
  division: Division!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Query {
  division(id: ID!): Division
  game(id: ID!): Game
  gameListing(id: ID!): GameListing
  organization(id: ID!): Organization
  organizationMembership(id: ID!): OrganizationMembership
  season(id: ID!): Season
  seasonParticipationPermit(id: ID!): SeasonParticipationPermit
  user(id: ID!): User
}

type Season {
  createdAt: DateTime!
  divisions: [Division!]!
  endDate: DateTime!
  games(endDate: DateTime!, startDate: DateTime!): [Game!]!
  id: ID!
  name: String!
  organization: Organization!
  participants: [SeasonParticipantEdge!]!
  updatedAt: DateTime!
}

type SeasonParticipantEdge {
  node: User!
  permit: SeasonParticipationPermit!
}

type SeasonParticipationPermit {
  createdAt: DateTime!
  id: ID!
  maxCasts: Int!
  membership: OrganizationMembership!
  role: SeasonRoleType!
  updatedAt: DateTime!
  visibility: [Position!]!
}

enum SeasonRoleType {
  MANAGER
  REFEREE
}

type User {
  city: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  organizations: [UserJoinedOrganizationEdge!]!
  phoneNumber: String
  season(seasonId: ID!): UserParticipatingSeasonEdge
  seasons: [UserParticipatingSeasonEdge!]!
  state: String
  streetAddress: String
  updatedAt: DateTime!
  zipCode: String
}

type UserJoinedOrganizationEdge {
  membership: OrganizationMembership!
  node: Organization!
}

type UserParticipatingSeasonEdge {
  node: Season!
  permit: SeasonParticipationPermit!
}
